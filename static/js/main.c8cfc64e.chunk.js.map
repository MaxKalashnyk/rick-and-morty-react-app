{"version":3,"sources":["api.js","Components/character-item/CharacterItem.js","Components/characters-list/CharacterList.js","App.js","serviceWorker.js","index.js"],"names":["getCharactersList","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","apiData","apiConvertedData","wrap","_context","prev","next","fetch","sent","json","abrupt","results","stop","apply","this","arguments","CharacterItem","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this$props$data","props","data","name","id","image","species","gender","origin","status","react_default","createElement","className","src","alt","Component","CharacterList","console","log","characterList","characters","map","character","character_item_CharacterItem","App","state","charactersList","setState","characters_list_CharacterList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAAaA,SAAiB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACPC,MAAM,8CADC,cACvBN,EADuBG,EAAAI,KAAAJ,EAAAE,KAAA,EAEEL,EAAQQ,OAFV,cAEvBP,EAFuBE,EAAAI,KAAAJ,EAAAM,OAAA,SAGtBR,EAAiBS,SAHK,wBAAAP,EAAAQ,SAAAZ,MAAH,yBAAAN,EAAAmB,MAAAC,KAAAC,YAAA,ICuBfC,EArBf,SAAAC,GAAA,SAAAD,IAAA,OAAArB,OAAAuB,EAAA,EAAAvB,CAAAmB,KAAAE,GAAArB,OAAAwB,EAAA,EAAAxB,CAAAmB,KAAAnB,OAAAyB,EAAA,EAAAzB,CAAAqB,GAAAH,MAAAC,KAAAC,YAAA,OAAApB,OAAA0B,EAAA,EAAA1B,CAAAqB,EAAAC,GAAAtB,OAAA2B,EAAA,EAAA3B,CAAAqB,EAAA,EAAAO,IAAA,SAAAC,MAAA,WACa,IAAAC,EASDX,KAAKY,MAAMC,KANXC,GAHCH,EAEDI,GAFCJ,EAGDG,MAEAE,GALCL,EAIDM,QAJCN,EAKDK,OALCL,EAMDO,OANCP,EAODQ,OAPCR,EAQDS,OAGJ,OACIC,EAAArC,EAAAsC,cAAA,OAAKC,UAAU,kBACXF,EAAArC,EAAAsC,cAAA,MAAIC,UAAU,yBAAyBT,GACvCO,EAAArC,EAAAsC,cAAA,OAAKE,IAAKR,EAAOS,IAAKX,SAftCZ,EAAA,CAAmCwB,aCWpBC,EAVf,SAAAxB,GAAA,SAAAwB,IAAA,OAAA9C,OAAAuB,EAAA,EAAAvB,CAAAmB,KAAA2B,GAAA9C,OAAAwB,EAAA,EAAAxB,CAAAmB,KAAAnB,OAAAyB,EAAA,EAAAzB,CAAA8C,GAAA5B,MAAAC,KAAAC,YAAA,OAAApB,OAAA0B,EAAA,EAAA1B,CAAA8C,EAAAxB,GAAAtB,OAAA2B,EAAA,EAAA3B,CAAA8C,EAAA,EAAAlB,IAAA,SAAAC,MAAA,WAEQkB,QAAQC,IAAI7B,KAAKY,OACjB,IAAMkB,EAAgB9B,KAAKY,MAAMmB,WAAWC,IAAI,SAAAC,GAC5C,OAAOZ,EAAArC,EAAAsC,cAACY,EAAD,CAAezB,IAAKwB,EAAUlB,GAAIF,KAAMoB,MAEnD,OAAOZ,EAAArC,EAAAsC,cAAA,OAAKC,UAAU,mBAAmBO,OANjDH,EAAA,CAAmCD,aCuBpBS,6MApBXC,MAAQ,CACJC,eAAgB,qNAIa1D,WAAvB0D,SACNrC,KAAKsC,SAAS,CACVD,eAAgBA,uIAKpB,OACIhB,EAAArC,EAAAsC,cAAA,OAAKC,UAAU,OACXF,EAAArC,EAAAsC,cAACiB,EAAD,CAAeR,WAAY/B,KAAKoC,MAAMC,yBAfpCX,aCOEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAArC,EAAAsC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8cfc64e.chunk.js","sourcesContent":["export const getCharactersList = async () => {\r\n    const apiData = await fetch(\"https://rickandmortyapi.com/api/character/\");\r\n    const apiConvertedData = await apiData.json();\r\n    return apiConvertedData.results;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport class CharacterItem extends Component {\r\n    render() {\r\n        const {\r\n            id,\r\n            name,\r\n            species,\r\n            image,\r\n            gender,\r\n            origin,\r\n            status\r\n        } = this.props.data;\r\n\r\n        return (\r\n            <div className=\"character-item\">\r\n                <h2 className=\"character-item__title\">{name}</h2>\r\n                <img src={image} alt={name} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterItem;\r\n","import React, { Component } from \"react\";\r\nimport CharacterItem from \"../character-item/CharacterItem\";\r\n\r\nexport class CharacterList extends Component {\r\n    render() {\r\n        console.log(this.props);\r\n        const characterList = this.props.characters.map(character => {\r\n            return <CharacterItem key={character.id} data={character} />;\r\n        });\r\n        return <div className=\"characters-wrap\">{characterList}</div>;\r\n    }\r\n}\r\n\r\nexport default CharacterList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { getCharactersList } from \"./api\";\nimport CharacterList from \"./Components/characters-list/CharacterList\";\n\nclass App extends Component {\n    state = {\n        charactersList: []\n    };\n\n    async componentDidMount() {\n        const charactersList = await getCharactersList();\n        this.setState({\n            charactersList: charactersList\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CharacterList characters={this.state.charactersList} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}