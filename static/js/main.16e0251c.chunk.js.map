{"version":3,"sources":["api.js","Components/SearchBar/SearchBar.js","Components/SortingPanel/SortingPanel.js","Components/FilterPanel/FilterPanel.js","constants.js","Components/Spinner/Spinner.js","Components/Pagination/Pagination.js","App.js","index.js"],"names":["getCharactersList","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","page","apiData","apiConvertedData","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","concat","sent","json","abrupt","results","stop","apply","this","minSearchInputValueLength","SearchBar","_Component","_getPrototypeOf2","_this","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","state","searchValue","searchCharacter","target","value","setState","inherits","createClass","key","react_default","createElement","className","type","onChange","name","onClick","props","handleSearch","Component","SortingPanel","htmlFor","id","FilterPanel","onSubmit","handleFilter","Components_SearchBar_SearchBar","Components_SortingPanel_SortingPanel","APIKeysObj","genderMale","genderFemale","genderUnknown","Spinner","react","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","Pagination","gotoPage","_this$props$onPageCha","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","totalRecords","handleClick","evt","preventDefault","handleMoveLeft","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","leftSpill","rightSpill","leftSpillPage","rightSpillPage","extraPages","toConsumableArray","_props$totalRecords","_props$pageNeighbours","_this2","aria-label","map","index","href","aria-hidden","e","App","charactersList","characterName","sortingNameParam","gender","performSearch","event","inputEl","elements","find","item","inputValue","toLowerCase","performFilteringByName","bind","assertThisInitialized","data","_this$state","filteredList","filter","character","includes","sort","b","localeCompare","CharacterListComponent","React","lazy","__webpack_require__","then","Components_FilterPanel_FilterPanel","Suspense","fallback","Components_Spinner_Spinner","characters","Components_Pagination_Pagination","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.16e0251c.chunk.js","sourcesContent":["export const getCharactersList = async (page = 1) => {\r\n    const apiData = await fetch(\r\n        `https://rickandmortyapi.com/api/character/?page=${page}`\r\n    );\r\n    const apiConvertedData = await apiData.json();\r\n    return apiConvertedData.results;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nconst minSearchInputValueLength = 3;\r\n\r\nexport class SearchBar extends Component {\r\n    state = {\r\n        searchValue: \"\"\r\n    };\r\n\r\n    searchCharacter = ({ target }) => {\r\n        if (target.value.length >= minSearchInputValueLength) {\r\n            this.setState({ searchValue: target.value });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-wrap\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"search-input\"\r\n                    onChange={this.searchCharacter}\r\n                    name=\"search\"\r\n                />\r\n                <button\r\n                    className=\"search-button\"\r\n                    onClick={this.props.handleSearch}\r\n                >\r\n                    Search\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class SortingPanel extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"sorting-panel-wrap\">\r\n                <fieldset>\r\n                    <legend>Filter by gender</legend>\r\n                    <label htmlFor=\"gender-all-sort\">\r\n                        All\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                            className=\"filter-input\"\r\n                            id=\"gender-all-sort\"\r\n                        />\r\n                    </label>\r\n                    <label htmlFor=\"gender-male-sort\">\r\n                        Male\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                            className=\"filter-input\"\r\n                            id=\"gender-male-sort\"\r\n                        />\r\n                    </label>\r\n                    <label htmlFor=\"gender-female-sort\">\r\n                        Female\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                            className=\"filter-input\"\r\n                            id=\"gender-female-sort\"\r\n                        />\r\n                    </label>\r\n                    <label htmlFor=\"gender-unknown-sort\">\r\n                        Unknown\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                            className=\"filter-input\"\r\n                            id=\"gender-unknown-sort\"\r\n                        />\r\n                    </label>\r\n                </fieldset>\r\n                <fieldset>\r\n                    <legend>Filter by name</legend>\r\n                    <label htmlFor=\"name-asc\">\r\n                        Aa-Zz\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"sorting\"\r\n                            className=\"filter-input\"\r\n                            id=\"name-asc\"\r\n                        />\r\n                    </label>\r\n                    <label htmlFor=\"name-desc\">\r\n                        Zz-Aa\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"sorting\"\r\n                            className=\"filter-input\"\r\n                            id=\"name-desc\"\r\n                        />\r\n                    </label>\r\n                </fieldset>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingPanel;\r\n","import React, { Component } from \"react\";\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport SortingPanel from \"../SortingPanel/SortingPanel\";\r\n\r\nexport class FilterPanel extends Component {\r\n    render() {\r\n        return (\r\n            <form\r\n                className=\"filter-form\"\r\n                onSubmit={this.props.handleSearch}\r\n                onChange={this.props.handleFilter}\r\n            >\r\n                <SearchBar />\r\n                <SortingPanel />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterPanel;\r\n","export const sortFilteringStringItems = (key, order = \"asc\") => {\r\n    return function(a, b) {\r\n        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n            return 0;\r\n        }\r\n\r\n        if (\r\n            a[key] === \"\" ||\r\n            typeof a[key] === \"object\" ||\r\n            b[key] === \"\" ||\r\n            typeof b[key] === \"object\"\r\n        ) {\r\n            return 0;\r\n        }\r\n        const varA = typeof a[key] === \"string\" ? a[key].toUpperCase() : a[key];\r\n        const varB = typeof b[key] === \"string\" ? b[key].toUpperCase() : b[key];\r\n        let comparison = 0;\r\n        comparison = varA.localeCompare(varB);\r\n\r\n        return order === \"desc\" ? comparison * -1 : comparison;\r\n    };\r\n};\r\n\r\nexport const APIKeysObj = {\r\n    genderMale: \"Male\",\r\n    genderFemale: \"Female\",\r\n    genderUnknown: \"unknown\"\r\n};\r\n\r\n\r\nexport const CHARACTERSCOUNT = 20;\r\n","import React, { Fragment } from \"react\";\r\nimport \"../Spinner/Spinner.scss\";\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"loader-wrap\">\r\n                <div className=\"loader\" />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Pagination.scss\";\r\n\r\nconst LEFT_PAGE = \"LEFT\";\r\nconst RIGHT_PAGE = \"RIGHT\";\r\n\r\nconst range = (from, to, step = 1) => {\r\n    let i = from;\r\n    const range = [];\r\n\r\n    while (i <= to) {\r\n        range.push(i);\r\n        i += step;\r\n    }\r\n\r\n    return range;\r\n};\r\n\r\nclass Pagination extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { totalRecords = null, pageNeighbours = 0 } = props;\r\n\r\n        this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\r\n\r\n        this.pageNeighbours =\r\n            typeof pageNeighbours === \"number\"\r\n                ? Math.max(0, Math.min(pageNeighbours, 2))\r\n                : 0;\r\n\r\n        this.totalPages = 20;\r\n\r\n        this.state = { currentPage: 1 };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.gotoPage(1);\r\n    }\r\n\r\n    gotoPage = page => {\r\n        const { onPageChanged = f => f } = this.props;\r\n\r\n        const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n\r\n        const paginationData = {\r\n            currentPage,\r\n            totalPages: this.totalPages,\r\n            totalRecords: this.totalRecords\r\n        };\r\n\r\n        this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n    };\r\n\r\n    handleClick = (page, evt) => {\r\n        evt.preventDefault();\r\n        this.gotoPage(page);\r\n    };\r\n\r\n    handleMoveLeft = evt => {\r\n        evt.preventDefault();\r\n        this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\r\n    };\r\n\r\n    handleMoveRight = evt => {\r\n        evt.preventDefault();\r\n        this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\r\n    };\r\n\r\n    fetchPageNumbers = () => {\r\n        const totalPages = this.totalPages;\r\n        const currentPage = this.state.currentPage;\r\n        const pageNeighbours = this.pageNeighbours;\r\n\r\n        const totalNumbers = this.pageNeighbours * 2 + 3;\r\n        const totalBlocks = totalNumbers + 2;\r\n\r\n        if (totalPages > totalBlocks) {\r\n            let pages = [];\r\n\r\n            const leftBound = currentPage - pageNeighbours;\r\n            const rightBound = currentPage + pageNeighbours;\r\n            const beforeLastPage = totalPages - 1;\r\n\r\n            const startPage = leftBound > 2 ? leftBound : 2;\r\n            const endPage =\r\n                rightBound < beforeLastPage ? rightBound : beforeLastPage;\r\n\r\n            pages = range(startPage, endPage);\r\n\r\n            const pagesCount = pages.length;\r\n            const singleSpillOffset = totalNumbers - pagesCount - 1;\r\n\r\n            const leftSpill = startPage > 2;\r\n            const rightSpill = endPage < beforeLastPage;\r\n\r\n            const leftSpillPage = LEFT_PAGE;\r\n            const rightSpillPage = RIGHT_PAGE;\r\n\r\n            if (leftSpill && !rightSpill) {\r\n                const extraPages = range(\r\n                    startPage - singleSpillOffset,\r\n                    startPage - 1\r\n                );\r\n                pages = [leftSpillPage, ...extraPages, ...pages];\r\n            } else if (!leftSpill && rightSpill) {\r\n                const extraPages = range(\r\n                    endPage + 1,\r\n                    endPage + singleSpillOffset\r\n                );\r\n                pages = [...pages, ...extraPages, rightSpillPage];\r\n            } else if (leftSpill && rightSpill) {\r\n                pages = [leftSpillPage, ...pages, rightSpillPage];\r\n            }\r\n\r\n            return [1, ...pages, totalPages];\r\n        }\r\n\r\n        return range(1, totalPages);\r\n    };\r\n\r\n    render() {\r\n        if (!this.totalRecords) return null;\r\n\r\n        if (this.totalPages === 1) return null;\r\n\r\n        const { currentPage } = this.state;\r\n        const pages = this.fetchPageNumbers();\r\n\r\n        return (\r\n            <Fragment>\r\n                <nav aria-label=\"Countries Pagination\">\r\n                    <ul className=\"pagination\">\r\n                        {pages.map((page, index) => {\r\n                            if (page === LEFT_PAGE)\r\n                                return (\r\n                                    <li key={index} className=\"page-item\">\r\n                                        <a\r\n                                            className=\"page-link\"\r\n                                            href=\"#\"\r\n                                            aria-label=\"Previous\"\r\n                                            onClick={this.handleMoveLeft}\r\n                                        >\r\n                                            <span aria-hidden=\"true\">\r\n                                                &laquo;\r\n                                            </span>\r\n                                            <span className=\"sr-only\">\r\n                                                Previous\r\n                                            </span>\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n\r\n                            if (page === RIGHT_PAGE)\r\n                                return (\r\n                                    <li key={index} className=\"page-item\">\r\n                                        <a\r\n                                            className=\"page-link\"\r\n                                            href=\"#\"\r\n                                            aria-label=\"Next\"\r\n                                            onClick={this.handleMoveRight}\r\n                                        >\r\n                                            <span aria-hidden=\"true\">\r\n                                                &raquo;\r\n                                            </span>\r\n                                            <span className=\"sr-only\">\r\n                                                Next\r\n                                            </span>\r\n                                        </a>\r\n                                    </li>\r\n                                );\r\n\r\n                            return (\r\n                                <li\r\n                                    key={index}\r\n                                    className={`page-item${\r\n                                        currentPage === page ? \" active\" : \"\"\r\n                                    }`}\r\n                                >\r\n                                    <a\r\n                                        className=\"page-link\"\r\n                                        href=\"#\"\r\n                                        onClick={e => this.handleClick(page, e)}\r\n                                    >\r\n                                        {page}\r\n                                    </a>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </nav>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nPagination.propTypes = {\r\n    totalRecords: PropTypes.number.isRequired,\r\n    pageNeighbours: PropTypes.number,\r\n    onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport { getCharactersList } from \"./api\";\r\nimport FilterPanel from \"./Components/FilterPanel/FilterPanel\";\r\nimport { APIKeysObj } from \"./constants\";\r\nimport Spinner from \"./Components/Spinner/Spinner\";\r\nimport Pagination from \"./Components/Pagination/Pagination\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.onPageChanged = this.onPageChanged.bind(this);\r\n    }\r\n\r\n    state = {\r\n        charactersList: [],\r\n        characterName: \"\",\r\n        sortingNameParam: \"\",\r\n        gender: \"\",\r\n        currentPage: null,\r\n        totalPages: null\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const charactersList = await getCharactersList();\r\n        this.setState({\r\n            charactersList: charactersList\r\n        });\r\n    }\r\n\r\n    performSearch = event => {\r\n        event.preventDefault();\r\n        const elemsList = Array.from(event.target.elements);\r\n        const inputEl = elemsList.find(item => item.name === \"search\");\r\n        if (inputEl) {\r\n            const inputValue = inputEl.value.toLowerCase();\r\n\r\n            this.setState({\r\n                characterName: inputValue\r\n            });\r\n        }\r\n    };\r\n\r\n    performFilteringByName = event => {\r\n        if (event.target.id === \"name-asc\") {\r\n            this.setState({\r\n                sortingNameParam: \"asc\"\r\n            });\r\n        } else if (event.target.id === \"name-desc\") {\r\n            this.setState({\r\n                sortingNameParam: \"desc\"\r\n            });\r\n        } else if (event.target.id === \"gender-all-sort\") {\r\n            this.setState({\r\n                gender: \"\"\r\n            });\r\n        } else if (event.target.id === \"gender-female-sort\") {\r\n            this.setState({\r\n                gender: APIKeysObj.genderFemale\r\n            });\r\n        } else if (event.target.id === \"gender-male-sort\") {\r\n            this.setState({\r\n                gender: APIKeysObj.genderMale\r\n            });\r\n        } else if (event.target.id === \"gender-unknown-sort\") {\r\n            this.setState({\r\n                gender: APIKeysObj.genderUnknown\r\n            });\r\n        }\r\n    };\r\n\r\n    async onPageChanged(data) {\r\n        const { currentPage } = data;\r\n        const charactersList = await getCharactersList(currentPage);\r\n\r\n        this.setState({ currentPage, charactersList });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            charactersList,\r\n            characterName,\r\n            sortingNameParam,\r\n            gender\r\n        } = this.state;\r\n\r\n        let filteredList = charactersList.filter(character => {\r\n            const lowercasedItem = character.name.toLowerCase();\r\n            return lowercasedItem.includes(characterName);\r\n        });\r\n\r\n        if (sortingNameParam === \"asc\") {\r\n            filteredList = filteredList.sort(function(a, b) {\r\n                return a.name.localeCompare(b.name);\r\n            });\r\n        } else if (sortingNameParam === \"desc\") {\r\n            filteredList = filteredList.sort(function(a, b) {\r\n                return b.name.localeCompare(a.name);\r\n            });\r\n        }\r\n\r\n        if (gender !== \"\") {\r\n            filteredList = filteredList.filter(item => {\r\n                return item.gender === gender;\r\n            });\r\n        }\r\n\r\n        const CharacterListComponent = React.lazy(props =>\r\n            import(\"./Components/CharacterList/CharacterList\")\r\n        );\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"filter-panel\">\r\n                            <aside>\r\n                                <FilterPanel\r\n                                    handleSearch={this.performSearch}\r\n                                    handleFilter={this.performFilteringByName}\r\n                                />\r\n                            </aside>\r\n                        </div>\r\n                        <div className=\"characters-panel\">\r\n                            <main>\r\n                                <React.Suspense fallback={<Spinner />}>\r\n                                    <CharacterListComponent\r\n                                        characters={filteredList}\r\n                                    />\r\n                                    <Pagination\r\n                                        totalRecords={20}\r\n                                        pageNeighbours={1}\r\n                                        onPageChanged={this.onPageChanged}\r\n                                    />\r\n                                </React.Suspense>\r\n                            </main>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}